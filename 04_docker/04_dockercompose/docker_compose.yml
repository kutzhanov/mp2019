version: '3.7'

services:
  # Docker Swarm service called 'balancer' with the configuration:
  balancer:
    #	based on Load Balancer image located in Docker Hub;
    image: kutzhanov/myapache:latest
    # port 80 is exposed;
    ports:
      - "80:80"
    # located in 'frontend' network;
    networks:
      - frontend
    # Apache configuration defined in Docker config;
    configs:
      - source: lb_config
        target: /etc/httpd/conf.d/mod_proxy.conf
        mode: 655
    deploy:
      # the service has one replica;
      replicas: 1
      #	ensure that the service containers will be deployed only on nodes where 'role' label defined in 'front';
      placement:
        constraints: [node.labels.role == front]
      # restart policy is 'on-failure';
      restart_policy:
        condition: on-failure
      resources:
        # reserve container resources by 25% of CPU and 256MB Memory;
        reservations:
          cpus: '0.25'
          memory: 256M
        # limit container resources by 50% of CPU and 512MB Memory;
        limits:
          cpus: '0.50'
          memory: 512M
      # add label 'service' with value 'load_balancer';
      labels:
        service: "load_balancer"

  # Docker Swarm service called 'web' with the configuration:
  web:
    # based on Web Server image located in Docker Hub;
    image: kutzhanov/myweb:1.2
    # port 8080 is exposed;
    ports:
      - "8080:8080"
    #	located in 'frontend' and 'backend' networks;
    networks:
      - frontend
      - backend
    # Apache configuration for virtual host defined in Docker config;
    configs:
      - source: web_config
        target: /etc/httpd/conf/httpd.conf
        mode: 655
    deploy:
      # the service has two replicas;
      replicas: 2
      #	ensure that the service containers will be deployed only on nodes where 'role' label defined in 'front';
      placement:
        constraints: [node.labels.role == front]
      #	restart policy is 'on-failure';
      restart_policy:
        condition: on-failure
      resources:
        # reserve container resources by 25% of CPU and 256MB Memory;
        reservations:
          cpus: '0.25'
          memory: 256M
        #	limit container resources by 50% of CPU and 512MB Memory;
        limits:
          cpus: '0.50'
          memory: 512M
      # add label 'service' with value 'web_server';
      labels:
        service: "web_server"
    # mount 'web_data' volume into root directory according to virtual host configuration on the service containers;
    volumes:
      - type: volume
        source: web_data
        target: /var/www/mp2019/
    #	environment variables for MySQL user, password, database name and server name with values
    # defined in external Docker secrets exclude server name;
    secrets:
      - mysql_user
      - mysql_pass
      - mysql_db
    environment:
      MYSQL_USER_FILE: /run/secrets/mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_pass
      MYSQL_DATABASE_FILE: /run/secrets/mysql_db
      MYSQL_SERVERNAME: mp2019_db
    depends_on:
      - db

  # Docker Swarm service called 'db' with the configuration:
  db:
    # based on Database Server image located in Docker Hub;
    image: kutzhanov/mysql:latest
    # port 3306 is exposed;
    ports:
      - "3306:3306"
    #	located in 'backend' network;
    networks:
      - backend
    deploy:
      # the service has one replica;
      replicas: 1
      # ensure that the service containers will be deployed only on nodes where 'role' label defined in 'back';
      placement:
        constraints: [node.labels.role == back]
      #	restart policy is 'on-failure';
      restart_policy:
        condition: on-failure
      resources:
        # reserve container resources by 50% of CPU and 512MB Memory;
        reservations:
          cpus: '0.50'
          memory: 512M
        # limit container resources by 70% of CPU and 1024MB Memory;
        limits:
          cpus: '0.70'
          memory: 1024M
      # add label 'service' with value 'database_server';
      labels:
        service: "database_server"
    # environment variables for MySQL user, password, root user password and database name with values defined in external Docker secrets;
    secrets:
      - mysql_user
      - mysql_pass
      - mysql_root_pass
      - mysql_db
    environment:
      MYSQL_USER_FILE: /run/secrets/mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_pass
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_pass
      MYSQL_DATABASE_FILE: /run/secrets/mysql_db

# Definitions for 'frontend' and 'backend' attacheble overlay networks;
networks:
  frontend:
    driver: overlay
    attachable: true
    name: frontend-overlay
  backend:
    driver: overlay
    attachable: true
    name: backend-overlay

# Definitions for external Docker secrets 'mysql_user', 'mysql_pass', 'mysql_root_pass' and 'mysql_db';
secrets:
  mysql_user:
    external: true
  mysql_pass:
    external: true
  mysql_root_pass:
    external: true
  mysql_db:
    external: true

# Definitions for Docker configs 'lb_config' and 'web_config' with Load Balancer Apache configuration
# and Web Server virtual host settings content;
configs:
  lb_config: # Load Balancer Apache configuration
  # Create Apache Load Balancer configuration which will balance traffic between 'web' service containers by Round Robin method.
    file: ./mod_proxy.conf
  web_config: # Web Server virtual host settings
    file: ./httpd.conf

# Definitions for 'web_data' volume
volumes: # same as docker volume create
  web_data:
